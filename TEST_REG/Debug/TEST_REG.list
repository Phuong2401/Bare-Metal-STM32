
TEST_REG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020410  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000400  08005008  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049cc  20000410  08005018  00020410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ddc  08005018  00024ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011375  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  000317b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00033fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00034ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003162  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b85  00000000  00000000  00038e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4b6  00000000  00000000  00049997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8e4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  000d8ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000410 	.word	0x20000410
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f80 	.word	0x08004f80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000414 	.word	0x20000414
 80001dc:	08004f80 	.word	0x08004f80

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <TIM1_UP_TIM10_IRQHandler>:
	return *CCR1;
}

int x;
void  TIM1_UP_TIM10_IRQHandler()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	// __asm("NOP");
	if(x == 0) x = 1;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <TIM1_UP_TIM10_IRQHandler+0x12>
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
	//else if (x == 1) x = 0;

	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, x);
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	20000484 	.word	0x20000484

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fa11 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f829 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8bd 	bl	8000690 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000516:	f000 f88d 	bl	8000634 <MX_I2C1_Init>
 // Flash_Program(0x08060000 ,msg,sizeof(msg));
 // SPI1_INIT();
 // uint8_t check = SPI_Read(WHO_AM_I);
 // SPI_Write(CTRL_REG1, 0b00001111);
  //I2C_Config1();
  uint8_t check =0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read (&hi2c1, 0x33 ,0x0f,1, &check, 1, 1000);
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	2301      	movs	r3, #1
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	220f      	movs	r2, #15
 8000530:	2133      	movs	r1, #51	; 0x33
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <main+0x50>)
 8000534:	f000 fe36 	bl	80011a4 <HAL_I2C_Mem_Read>
  //SM303_IC2_read1(0x32, 0x0f, &check);
  //Tim1_Init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f001 ff96 	bl	8002468 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <main+0x54>)
 800053e:	2100      	movs	r1, #0
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x58>)
 8000542:	f001 ffdb 	bl	80024fc <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <main+0x5c>)
 800054a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f001 ffb0 	bl	80024b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x4c>
 8000552:	bf00      	nop
 8000554:	2000042c 	.word	0x2000042c
 8000558:	08004fbc 	.word	0x08004fbc
 800055c:	0800076d 	.word	0x0800076d
 8000560:	20000480 	.word	0x20000480

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fcfc 	bl	8004f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <SystemClock_Config+0xc8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a26      	ldr	r2, [pc, #152]	; (800062c <SystemClock_Config+0xc8>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xcc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xcc>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fa85 	bl	8001af8 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f8c2 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2103      	movs	r1, #3
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fce7 	bl	8001fe8 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000620:	f000 f8ac 	bl	800077c <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f000 fc53 	bl	8000f1c <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f87e 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000042c 	.word	0x2000042c
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a26      	ldr	r2, [pc, #152]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_GPIO_Init+0xd4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_GPIO_Init+0xd4>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_GPIO_Init+0xd4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <MX_GPIO_Init+0xd8>)
 800071e:	f000 fbe3 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0xd8>)
 800073c:	f000 fa50 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0xd8>)
 8000758:	f000 fa42 	bl	8000be0 <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020c00 	.word	0x40020c00

0800076c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f001 ff53 	bl	8002620 <osDelay>
 800077a:	e7fb      	b.n	8000774 <StartDefaultTask+0x8>

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a11      	ldr	r2, [pc, #68]	; (80007dc <HAL_MspInit+0x54>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6453      	str	r3, [r2, #68]	; 0x44
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x54>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_MspInit+0x54>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_MspInit+0x54>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210f      	movs	r1, #15
 80007ca:	f06f 0001 	mvn.w	r0, #1
 80007ce:	f000 f9de 	bl	8000b8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <HAL_I2C_MspInit+0x84>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d12c      	bne.n	800085c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_I2C_MspInit+0x88>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800081e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000824:	2312      	movs	r3, #18
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000830:	2304      	movs	r3, #4
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <HAL_I2C_MspInit+0x8c>)
 800083c:	f000 f9d0 	bl	8000be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_I2C_MspInit+0x88>)
 800084a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40005400 	.word	0x40005400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020400 	.word	0x40020400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f898 	bl	80009d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008a4:	f003 faca 	bl	8003e3c <xTaskGetSchedulerState>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d001      	beq.n	80008b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ae:	f004 f8b3 	bl	8004a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f004 faff 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fdf9 	bl	8000504 <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000400 	.word	0x20000400
  ldr r1, =_edata
 800091c:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 8000920:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8000924:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8000928:	20004ddc 	.word	0x20004ddc

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f90d 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff ff10 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f917 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f8ed 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000400 	.word	0x20000400
 80009cc:	20000408 	.word	0x20000408
 80009d0:	20000404 	.word	0x20000404

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000408 	.word	0x20000408
 80009f8:	20000488 	.word	0x20000488

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000488 	.word	0x20000488

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff8e 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff47 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5c 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff8e 	bl	8000acc <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5d 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb0 	bl	8000b34 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e159      	b.n	8000eb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8148 	bne.w	8000eaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d130      	bne.n	8000c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 0201 	and.w	r2, r3, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d017      	beq.n	8000cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80a2 	beq.w	8000eaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a56      	ldr	r2, [pc, #344]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_GPIO_Init+0x2ec>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a49      	ldr	r2, [pc, #292]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d019      	beq.n	8000de2 <HAL_GPIO_Init+0x202>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <HAL_GPIO_Init+0x2f4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x1fe>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a47      	ldr	r2, [pc, #284]	; (8000ed8 <HAL_GPIO_Init+0x2f8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x1fa>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a46      	ldr	r2, [pc, #280]	; (8000edc <HAL_GPIO_Init+0x2fc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x1f6>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a45      	ldr	r2, [pc, #276]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x1f2>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e008      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e004      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000de2:	2300      	movs	r3, #0
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df4:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x2ec>)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e02:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e50:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	f67f aea2 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40013c00 	.word	0x40013c00

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e12b      	b.n	8001186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fc4c 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2224      	movs	r2, #36	; 0x24
 8000f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f80:	f001 fa2a 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8000f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a81      	ldr	r2, [pc, #516]	; (8001190 <HAL_I2C_Init+0x274>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d807      	bhi.n	8000fa0 <HAL_I2C_Init+0x84>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4a80      	ldr	r2, [pc, #512]	; (8001194 <HAL_I2C_Init+0x278>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	bf94      	ite	ls
 8000f98:	2301      	movls	r3, #1
 8000f9a:	2300      	movhi	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	e006      	b.n	8000fae <HAL_I2C_Init+0x92>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4a7d      	ldr	r2, [pc, #500]	; (8001198 <HAL_I2C_Init+0x27c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	bf94      	ite	ls
 8000fa8:	2301      	movls	r3, #1
 8000faa:	2300      	movhi	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0e7      	b.n	8001186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4a78      	ldr	r2, [pc, #480]	; (800119c <HAL_I2C_Init+0x280>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0c9b      	lsrs	r3, r3, #18
 8000fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a6a      	ldr	r2, [pc, #424]	; (8001190 <HAL_I2C_Init+0x274>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d802      	bhi.n	8000ff0 <HAL_I2C_Init+0xd4>
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3301      	adds	r3, #1
 8000fee:	e009      	b.n	8001004 <HAL_I2C_Init+0xe8>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	4a69      	ldr	r2, [pc, #420]	; (80011a0 <HAL_I2C_Init+0x284>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	099b      	lsrs	r3, r3, #6
 8001002:	3301      	adds	r3, #1
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	430b      	orrs	r3, r1
 800100a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	495c      	ldr	r1, [pc, #368]	; (8001190 <HAL_I2C_Init+0x274>)
 8001020:	428b      	cmp	r3, r1
 8001022:	d819      	bhi.n	8001058 <HAL_I2C_Init+0x13c>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1e59      	subs	r1, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001032:	1c59      	adds	r1, r3, #1
 8001034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001038:	400b      	ands	r3, r1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00a      	beq.n	8001054 <HAL_I2C_Init+0x138>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1e59      	subs	r1, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fbb1 f3f3 	udiv	r3, r1, r3
 800104c:	3301      	adds	r3, #1
 800104e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001052:	e051      	b.n	80010f8 <HAL_I2C_Init+0x1dc>
 8001054:	2304      	movs	r3, #4
 8001056:	e04f      	b.n	80010f8 <HAL_I2C_Init+0x1dc>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d111      	bne.n	8001084 <HAL_I2C_Init+0x168>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1e58      	subs	r0, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001072:	3301      	adds	r3, #1
 8001074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	e012      	b.n	80010aa <HAL_I2C_Init+0x18e>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1e58      	subs	r0, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6859      	ldr	r1, [r3, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	0099      	lsls	r1, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	fbb0 f3f3 	udiv	r3, r0, r3
 800109a:	3301      	adds	r3, #1
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2C_Init+0x196>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e022      	b.n	80010f8 <HAL_I2C_Init+0x1dc>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10e      	bne.n	80010d8 <HAL_I2C_Init+0x1bc>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1e58      	subs	r0, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6859      	ldr	r1, [r3, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	440b      	add	r3, r1
 80010c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80010cc:	3301      	adds	r3, #1
 80010ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d6:	e00f      	b.n	80010f8 <HAL_I2C_Init+0x1dc>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1e58      	subs	r0, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6859      	ldr	r1, [r3, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	0099      	lsls	r1, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	6809      	ldr	r1, [r1, #0]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69da      	ldr	r2, [r3, #28]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6911      	ldr	r1, [r2, #16]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68d2      	ldr	r2, [r2, #12]
 8001132:	4311      	orrs	r1, r2
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	430b      	orrs	r3, r1
 800113a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2220      	movs	r2, #32
 8001172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	000186a0 	.word	0x000186a0
 8001194:	001e847f 	.word	0x001e847f
 8001198:	003d08ff 	.word	0x003d08ff
 800119c:	431bde83 	.word	0x431bde83
 80011a0:	10624dd3 	.word	0x10624dd3

080011a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	817b      	strh	r3, [r7, #10]
 80011b6:	460b      	mov	r3, r1
 80011b8:	813b      	strh	r3, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011be:	f7ff fc1d 	bl	80009fc <HAL_GetTick>
 80011c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	f040 8208 	bne.w	80015e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2319      	movs	r3, #25
 80011d8:	2201      	movs	r2, #1
 80011da:	497b      	ldr	r1, [pc, #492]	; (80013c8 <HAL_I2C_Mem_Read+0x224>)
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 faef 	bl	80017c0 <I2C_WaitOnFlagUntilTimeout>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80011e8:	2302      	movs	r3, #2
 80011ea:	e1fb      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_I2C_Mem_Read+0x56>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e1f4      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d007      	beq.n	8001220 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800122e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2222      	movs	r2, #34	; 0x22
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4a5b      	ldr	r2, [pc, #364]	; (80013cc <HAL_I2C_Mem_Read+0x228>)
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001262:	88f8      	ldrh	r0, [r7, #6]
 8001264:	893a      	ldrh	r2, [r7, #8]
 8001266:	8979      	ldrh	r1, [r7, #10]
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4603      	mov	r3, r0
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f9bc 	bl	80015f0 <I2C_RequestMemoryRead>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e1b0      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001286:	2b00      	cmp	r3, #0
 8001288:	d113      	bne.n	80012b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	623b      	str	r3, [r7, #32]
 800129e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e184      	b.n	80015bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d11b      	bne.n	80012f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	e164      	b.n	80015bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d11b      	bne.n	8001332 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001308:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	e144      	b.n	80015bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001348:	e138      	b.n	80015bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	2b03      	cmp	r3, #3
 8001350:	f200 80f1 	bhi.w	8001536 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001358:	2b01      	cmp	r3, #1
 800135a:	d123      	bne.n	80013a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 fb44 	bl	80019ee <I2C_WaitOnRXNEFlagUntilTimeout>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e139      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138c:	3b01      	subs	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29b      	uxth	r3, r3
 800139a:	3b01      	subs	r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013a2:	e10b      	b.n	80015bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d14e      	bne.n	800144a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b2:	2200      	movs	r2, #0
 80013b4:	4906      	ldr	r1, [pc, #24]	; (80013d0 <HAL_I2C_Mem_Read+0x22c>)
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 fa02 	bl	80017c0 <I2C_WaitOnFlagUntilTimeout>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e10e      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
 80013c6:	bf00      	nop
 80013c8:	00100002 	.word	0x00100002
 80013cc:	ffff0000 	.word	0xffff0000
 80013d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001400:	3b01      	subs	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	3b01      	subs	r3, #1
 8001434:	b29a      	uxth	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001448:	e0b8      	b.n	80015bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001450:	2200      	movs	r2, #0
 8001452:	4966      	ldr	r1, [pc, #408]	; (80015ec <HAL_I2C_Mem_Read+0x448>)
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f9b3 	bl	80017c0 <I2C_WaitOnFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0bf      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ac:	2200      	movs	r2, #0
 80014ae:	494f      	ldr	r1, [pc, #316]	; (80015ec <HAL_I2C_Mem_Read+0x448>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f985 	bl	80017c0 <I2C_WaitOnFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e091      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001534:	e042      	b.n	80015bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 fa57 	bl	80019ee <I2C_WaitOnRXNEFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e04c      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001572:	b29b      	uxth	r3, r3
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b04      	cmp	r3, #4
 8001588:	d118      	bne.n	80015bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f aec2 	bne.w	800134a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80015e2:	2302      	movs	r3, #2
  }
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	00010004 	.word	0x00010004

080015f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	817b      	strh	r3, [r7, #10]
 8001602:	460b      	mov	r3, r1
 8001604:	813b      	strh	r3, [r7, #8]
 8001606:	4613      	mov	r3, r2
 8001608:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001618:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	2200      	movs	r2, #0
 8001632:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f8c2 	bl	80017c0 <I2C_WaitOnFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00d      	beq.n	800165e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001650:	d103      	bne.n	800165a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0aa      	b.n	80017b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800166c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	6a3a      	ldr	r2, [r7, #32]
 8001672:	4952      	ldr	r1, [pc, #328]	; (80017bc <I2C_RequestMemoryRead+0x1cc>)
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f8fa 	bl	800186e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e097      	b.n	80017b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	6a39      	ldr	r1, [r7, #32]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f964 	bl	800196c <I2C_WaitOnTXEFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00d      	beq.n	80016c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d107      	bne.n	80016c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e076      	b.n	80017b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016cc:	893b      	ldrh	r3, [r7, #8]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	e021      	b.n	800171c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80016d8:	893b      	ldrh	r3, [r7, #8]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	6a39      	ldr	r1, [r7, #32]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f93e 	bl	800196c <I2C_WaitOnTXEFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d107      	bne.n	800170e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800170c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e050      	b.n	80017b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001712:	893b      	ldrh	r3, [r7, #8]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f923 	bl	800196c <I2C_WaitOnTXEFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00d      	beq.n	8001748 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2b04      	cmp	r3, #4
 8001732:	d107      	bne.n	8001744 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001742:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e035      	b.n	80017b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001756:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	2200      	movs	r2, #0
 8001760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f82b 	bl	80017c0 <I2C_WaitOnFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00d      	beq.n	800178c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177e:	d103      	bne.n	8001788 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e013      	b.n	80017b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800178c:	897b      	ldrh	r3, [r7, #10]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	6a3a      	ldr	r2, [r7, #32]
 80017a0:	4906      	ldr	r1, [pc, #24]	; (80017bc <I2C_RequestMemoryRead+0x1cc>)
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f863 	bl	800186e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	00010002 	.word	0x00010002

080017c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017d0:	e025      	b.n	800181e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d021      	beq.n	800181e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017da:	f7ff f90f 	bl	80009fc <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d302      	bcc.n	80017f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d116      	bne.n	800181e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e023      	b.n	8001866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10d      	bne.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4013      	ands	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf0c      	ite	eq
 800183a:	2301      	moveq	r3, #1
 800183c:	2300      	movne	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	e00c      	b.n	800185e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4013      	ands	r3, r2
 8001850:	b29b      	uxth	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	429a      	cmp	r2, r3
 8001862:	d0b6      	beq.n	80017d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800187c:	e051      	b.n	8001922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188c:	d123      	bne.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2220      	movs	r2, #32
 80018b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f043 0204 	orr.w	r2, r3, #4
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e046      	b.n	8001964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d021      	beq.n	8001922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018de:	f7ff f88d 	bl	80009fc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d302      	bcc.n	80018f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d116      	bne.n	8001922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2220      	movs	r2, #32
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f043 0220 	orr.w	r2, r3, #32
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e020      	b.n	8001964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10c      	bne.n	8001946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4013      	ands	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	e00b      	b.n	800195e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	43da      	mvns	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4013      	ands	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d18d      	bne.n	800187e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001978:	e02d      	b.n	80019d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f88d 	bl	8001a9a <I2C_IsAcknowledgeFailed>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e02d      	b.n	80019e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d021      	beq.n	80019d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001992:	f7ff f833 	bl	80009fc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d302      	bcc.n	80019a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d116      	bne.n	80019d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f043 0220 	orr.w	r2, r3, #32
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e007      	b.n	80019e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d1ca      	bne.n	800197a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019fa:	e042      	b.n	8001a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d119      	bne.n	8001a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f06f 0210 	mvn.w	r2, #16
 8001a12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e029      	b.n	8001a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7fe ffdd 	bl	80009fc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d116      	bne.n	8001a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f043 0220 	orr.w	r2, r3, #32
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e007      	b.n	8001a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8c:	2b40      	cmp	r3, #64	; 0x40
 8001a8e:	d1b5      	bne.n	80019fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab0:	d11b      	bne.n	8001aea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e267      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d075      	beq.n	8001c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b16:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d00c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d112      	bne.n	8001b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b3a:	d10b      	bne.n	8001b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	4b7e      	ldr	r3, [pc, #504]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d05b      	beq.n	8001c00 <HAL_RCC_OscConfig+0x108>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d157      	bne.n	8001c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e242      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5c:	d106      	bne.n	8001b6c <HAL_RCC_OscConfig+0x74>
 8001b5e:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a75      	ldr	r2, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e01d      	b.n	8001ba8 <HAL_RCC_OscConfig+0xb0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x98>
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6f      	ldr	r2, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6d      	ldr	r3, [pc, #436]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6c      	ldr	r2, [pc, #432]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0xb0>
 8001b90:	4b69      	ldr	r3, [pc, #420]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a68      	ldr	r2, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a65      	ldr	r2, [pc, #404]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7fe ff24 	bl	80009fc <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7fe ff20 	bl	80009fc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e207      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xc0>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7fe ff10 	bl	80009fc <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be0:	f7fe ff0c 	bl	80009fc <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1f3      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	4b51      	ldr	r3, [pc, #324]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0xe8>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d063      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d11c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d116      	bne.n	8001c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x152>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e1c7      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4937      	ldr	r1, [pc, #220]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	e03a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_OscConfig+0x244>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7fe fec5 	bl	80009fc <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c76:	f7fe fec1 	bl	80009fc <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1a8      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4925      	ldr	r1, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x244>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fea4 	bl	80009fc <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb8:	f7fe fea0 	bl	80009fc <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e187      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d036      	beq.n	8001d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d016      	beq.n	8001d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_RCC_OscConfig+0x248>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7fe fe84 	bl	80009fc <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7fe fe80 	bl	80009fc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e167      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x200>
 8001d16:	e01b      	b.n	8001d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_OscConfig+0x248>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe fe6d 	bl	80009fc <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	e00e      	b.n	8001d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d26:	f7fe fe69 	bl	80009fc <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d907      	bls.n	8001d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e150      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	42470000 	.word	0x42470000
 8001d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ea      	bne.n	8001d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8097 	beq.w	8001e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d62:	4b81      	ldr	r3, [pc, #516]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	4b7d      	ldr	r3, [pc, #500]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a7c      	ldr	r2, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b7a      	ldr	r3, [pc, #488]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b77      	ldr	r3, [pc, #476]	; (8001f6c <HAL_RCC_OscConfig+0x474>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9a:	4b74      	ldr	r3, [pc, #464]	; (8001f6c <HAL_RCC_OscConfig+0x474>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a73      	ldr	r2, [pc, #460]	; (8001f6c <HAL_RCC_OscConfig+0x474>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7fe fe29 	bl	80009fc <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7fe fe25 	bl	80009fc <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e10c      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	; (8001f6c <HAL_RCC_OscConfig+0x474>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x2ea>
 8001dd4:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a63      	ldr	r2, [pc, #396]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x324>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x30c>
 8001dea:	4b5f      	ldr	r3, [pc, #380]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a5e      	ldr	r2, [pc, #376]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	4b5c      	ldr	r3, [pc, #368]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a5b      	ldr	r2, [pc, #364]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0x324>
 8001e04:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a57      	ldr	r2, [pc, #348]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a54      	ldr	r2, [pc, #336]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d015      	beq.n	8001e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7fe fdea 	bl	80009fc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fde6 	bl	80009fc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0cb      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ee      	beq.n	8001e2c <HAL_RCC_OscConfig+0x334>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7fe fdd4 	bl	80009fc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7fe fdd0 	bl	80009fc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0b5      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ee      	bne.n	8001e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a38      	ldr	r2, [pc, #224]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a1 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e96:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d05c      	beq.n	8001f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d141      	bne.n	8001f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_OscConfig+0x478>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fda4 	bl	80009fc <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fda0 	bl	80009fc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e087      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eca:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	019b      	lsls	r3, r3, #6
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	491b      	ldr	r1, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x478>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fd79 	bl	80009fc <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe fd75 	bl	80009fc <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e05c      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x416>
 8001f2c:	e054      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_RCC_OscConfig+0x478>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fd62 	bl	80009fc <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe fd5e 	bl	80009fc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e045      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_OscConfig+0x470>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x444>
 8001f5a:	e03d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e038      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x4ec>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d028      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d121      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d11a      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d111      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0cc      	b.n	8002196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d90c      	bls.n	8002024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b65      	ldr	r3, [pc, #404]	; (80021a0 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0b8      	b.n	8002196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800205e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	494d      	ldr	r1, [pc, #308]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d044      	beq.n	8002108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d119      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e07f      	b.n	8002196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06f      	b.n	8002196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e067      	b.n	8002196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4934      	ldr	r1, [pc, #208]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d8:	f7fe fc90 	bl	80009fc <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe fc8c 	bl	80009fc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e04f      	b.n	8002196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 020c 	and.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d1eb      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_RCC_ClockConfig+0x1b8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d20c      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e032      	b.n	8002196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4916      	ldr	r1, [pc, #88]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	490e      	ldr	r1, [pc, #56]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800216e:	f000 f821 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002172:	4602      	mov	r2, r0
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	490a      	ldr	r1, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1c8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fbf0 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08004fe0 	.word	0x08004fe0
 80021ac:	20000400 	.word	0x20000400
 80021b0:	20000404 	.word	0x20000404

080021b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b8:	b094      	sub	sp, #80	; 0x50
 80021ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
 80021c0:	2300      	movs	r3, #0
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c4:	2300      	movs	r3, #0
 80021c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021cc:	4b79      	ldr	r3, [pc, #484]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d00d      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x40>
 80021d8:	2b08      	cmp	r3, #8
 80021da:	f200 80e1 	bhi.w	80023a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x34>
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x3a>
 80021e6:	e0db      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021ec:	e0db      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_GetSysClockFreq+0x208>)
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021f2:	e0d8      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f4:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fe:	4b6d      	ldr	r3, [pc, #436]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	2200      	movs	r2, #0
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
 8002214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
 800221e:	2300      	movs	r3, #0
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
 8002222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002226:	4622      	mov	r2, r4
 8002228:	462b      	mov	r3, r5
 800222a:	f04f 0000 	mov.w	r0, #0
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	0159      	lsls	r1, r3, #5
 8002234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002238:	0150      	lsls	r0, r2, #5
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4621      	mov	r1, r4
 8002240:	1a51      	subs	r1, r2, r1
 8002242:	6139      	str	r1, [r7, #16]
 8002244:	4629      	mov	r1, r5
 8002246:	eb63 0301 	sbc.w	r3, r3, r1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002258:	4659      	mov	r1, fp
 800225a:	018b      	lsls	r3, r1, #6
 800225c:	4651      	mov	r1, sl
 800225e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002262:	4651      	mov	r1, sl
 8002264:	018a      	lsls	r2, r1, #6
 8002266:	4651      	mov	r1, sl
 8002268:	ebb2 0801 	subs.w	r8, r2, r1
 800226c:	4659      	mov	r1, fp
 800226e:	eb63 0901 	sbc.w	r9, r3, r1
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800227e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002286:	4690      	mov	r8, r2
 8002288:	4699      	mov	r9, r3
 800228a:	4623      	mov	r3, r4
 800228c:	eb18 0303 	adds.w	r3, r8, r3
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	462b      	mov	r3, r5
 8002294:	eb49 0303 	adc.w	r3, r9, r3
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022a6:	4629      	mov	r1, r5
 80022a8:	024b      	lsls	r3, r1, #9
 80022aa:	4621      	mov	r1, r4
 80022ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022b0:	4621      	mov	r1, r4
 80022b2:	024a      	lsls	r2, r1, #9
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ba:	2200      	movs	r2, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022c4:	f7fd ff8c 	bl	80001e0 <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d0:	e058      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	2200      	movs	r2, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	4611      	mov	r1, r2
 80022de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022e2:	623b      	str	r3, [r7, #32]
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022ec:	4642      	mov	r2, r8
 80022ee:	464b      	mov	r3, r9
 80022f0:	f04f 0000 	mov.w	r0, #0
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	0159      	lsls	r1, r3, #5
 80022fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022fe:	0150      	lsls	r0, r2, #5
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4641      	mov	r1, r8
 8002306:	ebb2 0a01 	subs.w	sl, r2, r1
 800230a:	4649      	mov	r1, r9
 800230c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800231c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002324:	ebb2 040a 	subs.w	r4, r2, sl
 8002328:	eb63 050b 	sbc.w	r5, r3, fp
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	00eb      	lsls	r3, r5, #3
 8002336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800233a:	00e2      	lsls	r2, r4, #3
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	4643      	mov	r3, r8
 8002342:	18e3      	adds	r3, r4, r3
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	464b      	mov	r3, r9
 8002348:	eb45 0303 	adc.w	r3, r5, r3
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800235a:	4629      	mov	r1, r5
 800235c:	028b      	lsls	r3, r1, #10
 800235e:	4621      	mov	r1, r4
 8002360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002364:	4621      	mov	r1, r4
 8002366:	028a      	lsls	r2, r1, #10
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	2200      	movs	r2, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	61fa      	str	r2, [r7, #28]
 8002374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002378:	f7fd ff32 	bl	80001e0 <__aeabi_uldivmod>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4613      	mov	r3, r2
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	3301      	adds	r3, #1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3750      	adds	r7, #80	; 0x50
 80023ac:	46bd      	mov	sp, r7
 80023ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	007a1200 	.word	0x007a1200

080023c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000400 	.word	0x20000400

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023dc:	f7ff fff0 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0a9b      	lsrs	r3, r3, #10
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08004ff0 	.word	0x08004ff0

08002400 <__NVIC_SetPriority>:
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002458:	2100      	movs	r1, #0
 800245a:	f06f 0004 	mvn.w	r0, #4
 800245e:	f7ff ffcf 	bl	8002400 <__NVIC_SetPriority>
#endif
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800246e:	f3ef 8305 	mrs	r3, IPSR
 8002472:	603b      	str	r3, [r7, #0]
  return(result);
 8002474:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800247a:	f06f 0305 	mvn.w	r3, #5
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	e00c      	b.n	800249c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <osKernelInitialize+0x44>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <osKernelInitialize+0x44>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	e002      	b.n	800249c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800249c:	687b      	ldr	r3, [r7, #4]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	2000048c 	.word	0x2000048c

080024b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024b6:	f3ef 8305 	mrs	r3, IPSR
 80024ba:	603b      	str	r3, [r7, #0]
  return(result);
 80024bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80024c2:	f06f 0305 	mvn.w	r3, #5
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	e010      	b.n	80024ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <osKernelStart+0x48>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d109      	bne.n	80024e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024d2:	f7ff ffbf 	bl	8002454 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <osKernelStart+0x48>)
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024dc:	f001 f866 	bl	80035ac <vTaskStartScheduler>
      stat = osOK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	e002      	b.n	80024ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000048c 	.word	0x2000048c

080024fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08e      	sub	sp, #56	; 0x38
 8002500:	af04      	add	r7, sp, #16
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800250c:	f3ef 8305 	mrs	r3, IPSR
 8002510:	617b      	str	r3, [r7, #20]
  return(result);
 8002512:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002514:	2b00      	cmp	r3, #0
 8002516:	d17e      	bne.n	8002616 <osThreadNew+0x11a>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d07b      	beq.n	8002616 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002522:	2318      	movs	r3, #24
 8002524:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d045      	beq.n	80025c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <osThreadNew+0x48>
        name = attr->name;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <osThreadNew+0x6e>
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b38      	cmp	r3, #56	; 0x38
 800255c:	d805      	bhi.n	800256a <osThreadNew+0x6e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <osThreadNew+0x72>
        return (NULL);
 800256a:	2300      	movs	r3, #0
 800256c:	e054      	b.n	8002618 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00e      	beq.n	80025a4 <osThreadNew+0xa8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b5b      	cmp	r3, #91	; 0x5b
 800258c:	d90a      	bls.n	80025a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <osThreadNew+0xa8>
        mem = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e010      	b.n	80025c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10c      	bne.n	80025c6 <osThreadNew+0xca>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d108      	bne.n	80025c6 <osThreadNew+0xca>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <osThreadNew+0xca>
          mem = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e001      	b.n	80025c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d110      	bne.n	80025ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025d4:	9202      	str	r2, [sp, #8]
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6a3a      	ldr	r2, [r7, #32]
 80025e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fe0c 	bl	8003200 <xTaskCreateStatic>
 80025e8:	4603      	mov	r3, r0
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e013      	b.n	8002616 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d110      	bne.n	8002616 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fe57 	bl	80032ba <xTaskCreate>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <osThreadNew+0x11a>
            hTask = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002616:	693b      	ldr	r3, [r7, #16]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002628:	f3ef 8305 	mrs	r3, IPSR
 800262c:	60bb      	str	r3, [r7, #8]
  return(result);
 800262e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <osDelay+0x1c>
    stat = osErrorISR;
 8002634:	f06f 0305 	mvn.w	r3, #5
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e007      	b.n	800264c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 ff7c 	bl	8003544 <vTaskDelay>
    }
  }

  return (stat);
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <vApplicationGetIdleTaskMemory+0x2c>)
 8002668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <vApplicationGetIdleTaskMemory+0x30>)
 800266e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	601a      	str	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000490 	.word	0x20000490
 8002688:	200004ec 	.word	0x200004ec

0800268c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800269c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4a06      	ldr	r2, [pc, #24]	; (80026bc <vApplicationGetTimerTaskMemory+0x30>)
 80026a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026aa:	601a      	str	r2, [r3, #0]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	200006ec 	.word	0x200006ec
 80026bc:	20000748 	.word	0x20000748

080026c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 0208 	add.w	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f103 0208 	add.w	r2, r3, #8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f103 0208 	add.w	r2, r3, #8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d103      	bne.n	8002782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e00c      	b.n	800279c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3308      	adds	r3, #8
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e002      	b.n	8002790 <vListInsert+0x2e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	d2f6      	bcs.n	800278a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	601a      	str	r2, [r3, #0]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6892      	ldr	r2, [r2, #8]
 80027ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d103      	bne.n	8002808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002852:	f002 f84f 	bl	80048f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	441a      	add	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	3b01      	subs	r3, #1
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	441a      	add	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	22ff      	movs	r2, #255	; 0xff
 8002896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	22ff      	movs	r2, #255	; 0xff
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d114      	bne.n	80028d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01a      	beq.n	80028e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3310      	adds	r3, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f903 	bl	8003ac0 <xTaskRemoveFromEventList>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d012      	beq.n	80028e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <xQueueGenericReset+0xcc>)
 80028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	e009      	b.n	80028e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3310      	adds	r3, #16
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fef2 	bl	80026c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3324      	adds	r3, #36	; 0x24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff feed 	bl	80026c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028e6:	f002 f835 	bl	8004954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	e000ed04 	.word	0xe000ed04

080028f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08e      	sub	sp, #56	; 0x38
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
}
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <xQueueGenericCreateStatic+0x52>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <xQueueGenericCreateStatic+0x56>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <xQueueGenericCreateStatic+0x58>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	623b      	str	r3, [r7, #32]
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <xQueueGenericCreateStatic+0x7e>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <xQueueGenericCreateStatic+0x82>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <xQueueGenericCreateStatic+0x84>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	61fb      	str	r3, [r7, #28]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002996:	2350      	movs	r3, #80	; 0x50
 8002998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b50      	cmp	r3, #80	; 0x50
 800299e:	d00a      	beq.n	80029b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	61bb      	str	r3, [r7, #24]
}
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f805 	bl	80029e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3730      	adds	r7, #48	; 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e002      	b.n	8002a0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a16:	2101      	movs	r1, #1
 8002a18:	69b8      	ldr	r0, [r7, #24]
 8002a1a:	f7ff ff05 	bl	8002828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericSend+0x32>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d103      	bne.n	8002a70 <xQueueGenericSend+0x40>
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <xQueueGenericSend+0x44>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <xQueueGenericSend+0x46>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <xQueueGenericSend+0x60>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d103      	bne.n	8002a9e <xQueueGenericSend+0x6e>
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <xQueueGenericSend+0x72>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <xQueueGenericSend+0x74>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <xQueueGenericSend+0x8e>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	623b      	str	r3, [r7, #32]
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002abe:	f001 f9bd 	bl	8003e3c <xTaskGetSchedulerState>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <xQueueGenericSend+0x9e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <xQueueGenericSend+0xa2>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <xQueueGenericSend+0xa4>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSend+0xbe>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	61fb      	str	r3, [r7, #28]
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aee:	f001 ff01 	bl	80048f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <xQueueGenericSend+0xd4>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d129      	bne.n	8002b58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0a:	f000 fa0b 	bl	8002f24 <prvCopyDataToQueue>
 8002b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	3324      	adds	r3, #36	; 0x24
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 ffcf 	bl	8003ac0 <xTaskRemoveFromEventList>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <xQueueGenericSend+0x1f8>)
 8002b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	e00a      	b.n	8002b50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <xQueueGenericSend+0x1f8>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b50:	f001 ff00 	bl	8004954 <vPortExitCritical>
				return pdPASS;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e063      	b.n	8002c20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b5e:	f001 fef9 	bl	8004954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e05c      	b.n	8002c20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 f809 	bl	8003b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b7a:	f001 feeb 	bl	8004954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b7e:	f000 fd7b 	bl	8003678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b82:	f001 feb7 	bl	80048f4 <vPortEnterCritical>
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d103      	bne.n	8002b9c <xQueueGenericSend+0x16c>
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d103      	bne.n	8002bb2 <xQueueGenericSend+0x182>
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb2:	f001 fecf 	bl	8004954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bb6:	1d3a      	adds	r2, r7, #4
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fff8 	bl	8003bb4 <xTaskCheckForTimeOut>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d124      	bne.n	8002c14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bcc:	f000 faa2 	bl	8003114 <prvIsQueueFull>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d018      	beq.n	8002c08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	3310      	adds	r3, #16
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 ff1e 	bl	8003a20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be6:	f000 fa2d 	bl	8003044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bea:	f000 fd53 	bl	8003694 <xTaskResumeAll>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f af7c 	bne.w	8002aee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <xQueueGenericSend+0x1f8>)
 8002bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	e772      	b.n	8002aee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0a:	f000 fa1b 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c0e:	f000 fd41 	bl	8003694 <xTaskResumeAll>
 8002c12:	e76c      	b.n	8002aee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c16:	f000 fa15 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c1a:	f000 fd3b 	bl	8003694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3738      	adds	r7, #56	; 0x38
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	e000ed04 	.word	0xe000ed04

08002c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b090      	sub	sp, #64	; 0x40
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d103      	bne.n	8002c68 <xQueueGenericSendFromISR+0x3c>
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <xQueueGenericSendFromISR+0x40>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <xQueueGenericSendFromISR+0x42>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d103      	bne.n	8002c96 <xQueueGenericSendFromISR+0x6a>
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <xQueueGenericSendFromISR+0x6e>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueGenericSendFromISR+0x70>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	623b      	str	r3, [r7, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cb6:	f001 feff 	bl	8004ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cba:	f3ef 8211 	mrs	r2, BASEPRI
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	61fa      	str	r2, [r7, #28]
 8002cd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <xQueueGenericSendFromISR+0xbc>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d12f      	bne.n	8002d48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cfe:	f000 f911 	bl	8002f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d112      	bne.n	8002d32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d016      	beq.n	8002d42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	3324      	adds	r3, #36	; 0x24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fed1 	bl	8003ac0 <xTaskRemoveFromEventList>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00e      	beq.n	8002d42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e007      	b.n	8002d42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d36:	3301      	adds	r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	b25a      	sxtb	r2, r3
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d42:	2301      	movs	r3, #1
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d46:	e001      	b.n	8002d4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3740      	adds	r7, #64	; 0x40
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <xQueueReceive+0x30>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	623b      	str	r3, [r7, #32]
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <xQueueReceive+0x3e>
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <xQueueReceive+0x42>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <xQueueReceive+0x44>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueReceive+0x5e>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	61fb      	str	r3, [r7, #28]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc2:	f001 f83b 	bl	8003e3c <xTaskGetSchedulerState>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <xQueueReceive+0x6e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <xQueueReceive+0x72>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xQueueReceive+0x74>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueReceive+0x8e>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	61bb      	str	r3, [r7, #24]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df2:	f001 fd7f 	bl	80048f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01f      	beq.n	8002e42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e06:	f000 f8f7 	bl	8002ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00f      	beq.n	8002e3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	3310      	adds	r3, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fe4e 	bl	8003ac0 <xTaskRemoveFromEventList>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <xQueueReceive+0x1bc>)
 8002e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e3a:	f001 fd8b 	bl	8004954 <vPortExitCritical>
				return pdPASS;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e069      	b.n	8002f16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e48:	f001 fd84 	bl	8004954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e062      	b.n	8002f16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fe94 	bl	8003b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e60:	2301      	movs	r3, #1
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e64:	f001 fd76 	bl	8004954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e68:	f000 fc06 	bl	8003678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6c:	f001 fd42 	bl	80048f4 <vPortEnterCritical>
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e76:	b25b      	sxtb	r3, r3
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d103      	bne.n	8002e86 <xQueueReceive+0x122>
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d103      	bne.n	8002e9c <xQueueReceive+0x138>
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e9c:	f001 fd5a 	bl	8004954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea0:	1d3a      	adds	r2, r7, #4
 8002ea2:	f107 0310 	add.w	r3, r7, #16
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fe83 	bl	8003bb4 <xTaskCheckForTimeOut>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d123      	bne.n	8002efc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb6:	f000 f917 	bl	80030e8 <prvIsQueueEmpty>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d017      	beq.n	8002ef0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	3324      	adds	r3, #36	; 0x24
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fda9 	bl	8003a20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed0:	f000 f8b8 	bl	8003044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ed4:	f000 fbde 	bl	8003694 <xTaskResumeAll>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d189      	bne.n	8002df2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <xQueueReceive+0x1bc>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	e780      	b.n	8002df2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef2:	f000 f8a7 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef6:	f000 fbcd 	bl	8003694 <xTaskResumeAll>
 8002efa:	e77a      	b.n	8002df2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efe:	f000 f8a1 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f02:	f000 fbc7 	bl	8003694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f08:	f000 f8ee 	bl	80030e8 <prvIsQueueEmpty>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f43f af6f 	beq.w	8002df2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3730      	adds	r7, #48	; 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14d      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 ff92 	bl	8003e78 <xTaskPriorityDisinherit>
 8002f54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e043      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d119      	bne.n	8002f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6858      	ldr	r0, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	f001 fff0 	bl	8004f54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d32b      	bcc.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e026      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68d8      	ldr	r0, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f001 ffd6 	bl	8004f54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	425b      	negs	r3, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d105      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fee:	697b      	ldr	r3, [r7, #20]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d303      	bcc.n	800302c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	461a      	mov	r2, r3
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f001 ff8c 	bl	8004f54 <memcpy>
	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800304c:	f001 fc52 	bl	80048f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003058:	e011      	b.n	800307e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3324      	adds	r3, #36	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fd2a 	bl	8003ac0 <xTaskRemoveFromEventList>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003072:	f000 fe01 	bl	8003c78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	dce9      	bgt.n	800305a <prvUnlockQueue+0x16>
 8003086:	e000      	b.n	800308a <prvUnlockQueue+0x46>
					break;
 8003088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003092:	f001 fc5f 	bl	8004954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003096:	f001 fc2d 	bl	80048f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a2:	e011      	b.n	80030c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3310      	adds	r3, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fd05 	bl	8003ac0 <xTaskRemoveFromEventList>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030bc:	f000 fddc 	bl	8003c78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dce9      	bgt.n	80030a4 <prvUnlockQueue+0x60>
 80030d0:	e000      	b.n	80030d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030dc:	f001 fc3a 	bl	8004954 <vPortExitCritical>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f0:	f001 fc00 	bl	80048f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003106:	f001 fc25 	bl	8004954 <vPortExitCritical>

	return xReturn;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800311c:	f001 fbea 	bl	80048f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	429a      	cmp	r2, r3
 800312a:	d102      	bne.n	8003132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e001      	b.n	8003136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003136:	f001 fc0d 	bl	8004954 <vPortExitCritical>

	return xReturn;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e014      	b.n	800317e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003154:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <vQueueAddToRegistry+0x50>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <vQueueAddToRegistry+0x50>)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <vQueueAddToRegistry+0x50>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003176:	e006      	b.n	8003186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d9e7      	bls.n	8003154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000b48 	.word	0x20000b48

08003198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031a8:	f001 fba4 	bl	80048f4 <vPortEnterCritical>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d103      	bne.n	80031c2 <vQueueWaitForMessageRestricted+0x2a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d103      	bne.n	80031d8 <vQueueWaitForMessageRestricted+0x40>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d8:	f001 fbbc 	bl	8004954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3324      	adds	r3, #36	; 0x24
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fc3b 	bl	8003a68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff26 	bl	8003044 <prvUnlockQueue>
	}
 80031f8:	bf00      	nop
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	; 0x38
 8003204:	af04      	add	r7, sp, #16
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	623b      	str	r3, [r7, #32]
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xTaskCreateStatic+0x46>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	61fb      	str	r3, [r7, #28]
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003246:	235c      	movs	r3, #92	; 0x5c
 8003248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b5c      	cmp	r3, #92	; 0x5c
 800324e:	d00a      	beq.n	8003266 <xTaskCreateStatic+0x66>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	61bb      	str	r3, [r7, #24]
}
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003266:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01e      	beq.n	80032ac <xTaskCreateStatic+0xac>
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003286:	2300      	movs	r3, #0
 8003288:	9303      	str	r3, [sp, #12]
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	9302      	str	r3, [sp, #8]
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f850 	bl	8003344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032a6:	f000 f8dd 	bl	8003464 <prvAddNewTaskToReadyList>
 80032aa:	e001      	b.n	80032b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032b0:	697b      	ldr	r3, [r7, #20]
	}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3728      	adds	r7, #40	; 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b08c      	sub	sp, #48	; 0x30
 80032be:	af04      	add	r7, sp, #16
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fc32 	bl	8004b38 <pvPortMalloc>
 80032d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032dc:	205c      	movs	r0, #92	; 0x5c
 80032de:	f001 fc2b 	bl	8004b38 <pvPortMalloc>
 80032e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
 80032f0:	e005      	b.n	80032fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f001 fcec 	bl	8004cd0 <vPortFree>
 80032f8:	e001      	b.n	80032fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	2300      	movs	r3, #0
 8003310:	9303      	str	r3, [sp, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	9302      	str	r3, [sp, #8]
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f80e 	bl	8003344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003328:	69f8      	ldr	r0, [r7, #28]
 800332a:	f000 f89b 	bl	8003464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	e002      	b.n	800333a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800333a:	69bb      	ldr	r3, [r7, #24]
	}
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	461a      	mov	r2, r3
 800335c:	21a5      	movs	r1, #165	; 0xa5
 800335e:	f001 fe07 	bl	8004f70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800336c:	3b01      	subs	r3, #1
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	617b      	str	r3, [r7, #20]
}
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01f      	beq.n	80033e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e012      	b.n	80033ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	7819      	ldrb	r1, [r3, #0]
 80033b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	3334      	adds	r3, #52	; 0x34
 80033b8:	460a      	mov	r2, r1
 80033ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d9e9      	bls.n	80033a8 <prvInitialiseNewTask+0x64>
 80033d4:	e000      	b.n	80033d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80033d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e0:	e003      	b.n	80033ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	2b37      	cmp	r3, #55	; 0x37
 80033ee:	d901      	bls.n	80033f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033f0:	2337      	movs	r3, #55	; 0x37
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	2200      	movs	r2, #0
 8003404:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	3304      	adds	r3, #4
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f978 	bl	8002700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	3318      	adds	r3, #24
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff f973 	bl	8002700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800341e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	2200      	movs	r2, #0
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	68f9      	ldr	r1, [r7, #12]
 8003442:	69b8      	ldr	r0, [r7, #24]
 8003444:	f001 f928 	bl	8004698 <pxPortInitialiseStack>
 8003448:	4602      	mov	r2, r0
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800345a:	bf00      	nop
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800346c:	f001 fa42 	bl	80048f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <prvAddNewTaskToReadyList+0xc4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <prvAddNewTaskToReadyList+0xc4>)
 8003478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800347a:	4b2c      	ldr	r3, [pc, #176]	; (800352c <prvAddNewTaskToReadyList+0xc8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003482:	4a2a      	ldr	r2, [pc, #168]	; (800352c <prvAddNewTaskToReadyList+0xc8>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <prvAddNewTaskToReadyList+0xc4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d110      	bne.n	80034b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003490:	f000 fc16 	bl	8003cc0 <prvInitialiseTaskLists>
 8003494:	e00d      	b.n	80034b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <prvAddNewTaskToReadyList+0xcc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <prvAddNewTaskToReadyList+0xc8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d802      	bhi.n	80034b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <prvAddNewTaskToReadyList+0xc8>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <prvAddNewTaskToReadyList+0xd0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <prvAddNewTaskToReadyList+0xd0>)
 80034ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <prvAddNewTaskToReadyList+0xd0>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <prvAddNewTaskToReadyList+0xd4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d903      	bls.n	80034d8 <prvAddNewTaskToReadyList+0x74>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <prvAddNewTaskToReadyList+0xd4>)
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4a15      	ldr	r2, [pc, #84]	; (800353c <prvAddNewTaskToReadyList+0xd8>)
 80034e6:	441a      	add	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f7ff f913 	bl	800271a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034f4:	f001 fa2e 	bl	8004954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <prvAddNewTaskToReadyList+0xcc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <prvAddNewTaskToReadyList+0xc8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	429a      	cmp	r2, r3
 800350c:	d207      	bcs.n	800351e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <prvAddNewTaskToReadyList+0xdc>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000105c 	.word	0x2000105c
 800352c:	20000b88 	.word	0x20000b88
 8003530:	20001068 	.word	0x20001068
 8003534:	20001078 	.word	0x20001078
 8003538:	20001064 	.word	0x20001064
 800353c:	20000b8c 	.word	0x20000b8c
 8003540:	e000ed04 	.word	0xe000ed04

08003544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <vTaskDelay+0x60>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <vTaskDelay+0x30>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	60bb      	str	r3, [r7, #8]
}
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003574:	f000 f880 	bl	8003678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003578:	2100      	movs	r1, #0
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fcea 	bl	8003f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003580:	f000 f888 	bl	8003694 <xTaskResumeAll>
 8003584:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <vTaskDelay+0x64>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20001084 	.word	0x20001084
 80035a8:	e000ed04 	.word	0xe000ed04

080035ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035ba:	463a      	mov	r2, r7
 80035bc:	1d39      	adds	r1, r7, #4
 80035be:	f107 0308 	add.w	r3, r7, #8
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f848 	bl	8002658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	9202      	str	r2, [sp, #8]
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	460a      	mov	r2, r1
 80035da:	4921      	ldr	r1, [pc, #132]	; (8003660 <vTaskStartScheduler+0xb4>)
 80035dc:	4821      	ldr	r0, [pc, #132]	; (8003664 <vTaskStartScheduler+0xb8>)
 80035de:	f7ff fe0f 	bl	8003200 <xTaskCreateStatic>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <vTaskStartScheduler+0xbc>)
 80035e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <vTaskStartScheduler+0xbc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e001      	b.n	80035fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003600:	f000 fcfc 	bl	8003ffc <xTimerCreateTimerTask>
 8003604:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d116      	bne.n	800363a <vTaskStartScheduler+0x8e>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	613b      	str	r3, [r7, #16]
}
 800361e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <vTaskStartScheduler+0xc0>)
 8003622:	f04f 32ff 	mov.w	r2, #4294967295
 8003626:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <vTaskStartScheduler+0xc4>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <vTaskStartScheduler+0xc8>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003634:	f001 f8bc 	bl	80047b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003638:	e00e      	b.n	8003658 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d10a      	bne.n	8003658 <vTaskStartScheduler+0xac>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60fb      	str	r3, [r7, #12]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <vTaskStartScheduler+0xaa>
}
 8003658:	bf00      	nop
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	08004fa4 	.word	0x08004fa4
 8003664:	08003c91 	.word	0x08003c91
 8003668:	20001080 	.word	0x20001080
 800366c:	2000107c 	.word	0x2000107c
 8003670:	20001068 	.word	0x20001068
 8003674:	20001060 	.word	0x20001060

08003678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <vTaskSuspendAll+0x18>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	4a03      	ldr	r2, [pc, #12]	; (8003690 <vTaskSuspendAll+0x18>)
 8003684:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	20001084 	.word	0x20001084

08003694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036a2:	4b42      	ldr	r3, [pc, #264]	; (80037ac <xTaskResumeAll+0x118>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	603b      	str	r3, [r7, #0]
}
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036c0:	f001 f918 	bl	80048f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036c4:	4b39      	ldr	r3, [pc, #228]	; (80037ac <xTaskResumeAll+0x118>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	4a38      	ldr	r2, [pc, #224]	; (80037ac <xTaskResumeAll+0x118>)
 80036cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <xTaskResumeAll+0x118>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d162      	bne.n	800379c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <xTaskResumeAll+0x11c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d05e      	beq.n	800379c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036de:	e02f      	b.n	8003740 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e0:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <xTaskResumeAll+0x120>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3318      	adds	r3, #24
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f871 	bl	80027d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3304      	adds	r3, #4
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f86c 	bl	80027d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <xTaskResumeAll+0x124>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d903      	bls.n	8003710 <xTaskResumeAll+0x7c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <xTaskResumeAll+0x124>)
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4a27      	ldr	r2, [pc, #156]	; (80037bc <xTaskResumeAll+0x128>)
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe fff7 	bl	800271a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <xTaskResumeAll+0x12c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <xTaskResumeAll+0x130>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <xTaskResumeAll+0x120>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1cb      	bne.n	80036e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800374e:	f000 fb55 	bl	8003dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <xTaskResumeAll+0x134>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d010      	beq.n	8003780 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800375e:	f000 f847 	bl	80037f0 <xTaskIncrementTick>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003768:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <xTaskResumeAll+0x130>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3b01      	subs	r3, #1
 8003772:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f1      	bne.n	800375e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <xTaskResumeAll+0x134>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <xTaskResumeAll+0x130>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <xTaskResumeAll+0x138>)
 800378e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800379c:	f001 f8da 	bl	8004954 <vPortExitCritical>

	return xAlreadyYielded;
 80037a0:	68bb      	ldr	r3, [r7, #8]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20001084 	.word	0x20001084
 80037b0:	2000105c 	.word	0x2000105c
 80037b4:	2000101c 	.word	0x2000101c
 80037b8:	20001064 	.word	0x20001064
 80037bc:	20000b8c 	.word	0x20000b8c
 80037c0:	20000b88 	.word	0x20000b88
 80037c4:	20001070 	.word	0x20001070
 80037c8:	2000106c 	.word	0x2000106c
 80037cc:	e000ed04 	.word	0xe000ed04

080037d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <xTaskGetTickCount+0x1c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037dc:	687b      	ldr	r3, [r7, #4]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20001060 	.word	0x20001060

080037f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037fa:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <xTaskIncrementTick+0x148>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f040 808f 	bne.w	8003922 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003804:	4b4d      	ldr	r3, [pc, #308]	; (800393c <xTaskIncrementTick+0x14c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800380c:	4a4b      	ldr	r2, [pc, #300]	; (800393c <xTaskIncrementTick+0x14c>)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d120      	bne.n	800385a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003818:	4b49      	ldr	r3, [pc, #292]	; (8003940 <xTaskIncrementTick+0x150>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <xTaskIncrementTick+0x48>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	603b      	str	r3, [r7, #0]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <xTaskIncrementTick+0x46>
 8003838:	4b41      	ldr	r3, [pc, #260]	; (8003940 <xTaskIncrementTick+0x150>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b41      	ldr	r3, [pc, #260]	; (8003944 <xTaskIncrementTick+0x154>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a3f      	ldr	r2, [pc, #252]	; (8003940 <xTaskIncrementTick+0x150>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <xTaskIncrementTick+0x154>)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <xTaskIncrementTick+0x158>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a3d      	ldr	r2, [pc, #244]	; (8003948 <xTaskIncrementTick+0x158>)
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	f000 fad1 	bl	8003dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800385a:	4b3c      	ldr	r3, [pc, #240]	; (800394c <xTaskIncrementTick+0x15c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	429a      	cmp	r2, r3
 8003862:	d349      	bcc.n	80038f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003864:	4b36      	ldr	r3, [pc, #216]	; (8003940 <xTaskIncrementTick+0x150>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <xTaskIncrementTick+0x15c>)
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	601a      	str	r2, [r3, #0]
					break;
 8003876:	e03f      	b.n	80038f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <xTaskIncrementTick+0x150>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d203      	bcs.n	8003898 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003890:	4a2e      	ldr	r2, [pc, #184]	; (800394c <xTaskIncrementTick+0x15c>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003896:	e02f      	b.n	80038f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3304      	adds	r3, #4
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ff99 	bl	80027d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3318      	adds	r3, #24
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe ff90 	bl	80027d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <xTaskIncrementTick+0x160>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d903      	bls.n	80038c8 <xTaskIncrementTick+0xd8>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <xTaskIncrementTick+0x160>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <xTaskIncrementTick+0x164>)
 80038d6:	441a      	add	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7fe ff1b 	bl	800271a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <xTaskIncrementTick+0x168>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3b8      	bcc.n	8003864 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f6:	e7b5      	b.n	8003864 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <xTaskIncrementTick+0x168>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	4915      	ldr	r1, [pc, #84]	; (8003954 <xTaskIncrementTick+0x164>)
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d901      	bls.n	8003914 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <xTaskIncrementTick+0x16c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e004      	b.n	800392c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <xTaskIncrementTick+0x170>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <xTaskIncrementTick+0x170>)
 800392a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800392c:	697b      	ldr	r3, [r7, #20]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20001084 	.word	0x20001084
 800393c:	20001060 	.word	0x20001060
 8003940:	20001014 	.word	0x20001014
 8003944:	20001018 	.word	0x20001018
 8003948:	20001074 	.word	0x20001074
 800394c:	2000107c 	.word	0x2000107c
 8003950:	20001064 	.word	0x20001064
 8003954:	20000b8c 	.word	0x20000b8c
 8003958:	20000b88 	.word	0x20000b88
 800395c:	20001070 	.word	0x20001070
 8003960:	2000106c 	.word	0x2000106c

08003964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <vTaskSwitchContext+0xa8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003972:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <vTaskSwitchContext+0xac>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003978:	e041      	b.n	80039fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800397a:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <vTaskSwitchContext+0xac>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <vTaskSwitchContext+0xb0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e010      	b.n	80039aa <vTaskSwitchContext+0x46>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	607b      	str	r3, [r7, #4]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <vTaskSwitchContext+0x3e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	491b      	ldr	r1, [pc, #108]	; (8003a18 <vTaskSwitchContext+0xb4>)
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0e4      	beq.n	8003988 <vTaskSwitchContext+0x24>
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <vTaskSwitchContext+0xb4>)
 80039ca:	4413      	add	r3, r2
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3308      	adds	r3, #8
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d104      	bne.n	80039ee <vTaskSwitchContext+0x8a>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <vTaskSwitchContext+0xb8>)
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4a06      	ldr	r2, [pc, #24]	; (8003a14 <vTaskSwitchContext+0xb0>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6013      	str	r3, [r2, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20001084 	.word	0x20001084
 8003a10:	20001070 	.word	0x20001070
 8003a14:	20001064 	.word	0x20001064
 8003a18:	20000b8c 	.word	0x20000b8c
 8003a1c:	20000b88 	.word	0x20000b88

08003a20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	60fb      	str	r3, [r7, #12]
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <vTaskPlaceOnEventList+0x44>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe fe87 	bl	8002762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a54:	2101      	movs	r1, #1
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	f000 fa7c 	bl	8003f54 <prvAddCurrentTaskToDelayedList>
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000b88 	.word	0x20000b88

08003a68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	617b      	str	r3, [r7, #20]
}
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <vTaskPlaceOnEventListRestricted+0x54>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3318      	adds	r3, #24
 8003a96:	4619      	mov	r1, r3
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7fe fe3e 	bl	800271a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	68b8      	ldr	r0, [r7, #8]
 8003aae:	f000 fa51 	bl	8003f54 <prvAddCurrentTaskToDelayedList>
	}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000b88 	.word	0x20000b88

08003ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60fb      	str	r3, [r7, #12]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3318      	adds	r3, #24
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fe6f 	bl	80027d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <xTaskRemoveFromEventList+0xb0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11d      	bne.n	8003b3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fe66 	bl	80027d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <xTaskRemoveFromEventList+0xb4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d903      	bls.n	8003b1c <xTaskRemoveFromEventList+0x5c>
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <xTaskRemoveFromEventList+0xb4>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <xTaskRemoveFromEventList+0xb8>)
 8003b2a:	441a      	add	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fe fdf1 	bl	800271a <vListInsertEnd>
 8003b38:	e005      	b.n	8003b46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3318      	adds	r3, #24
 8003b3e:	4619      	mov	r1, r3
 8003b40:	480e      	ldr	r0, [pc, #56]	; (8003b7c <xTaskRemoveFromEventList+0xbc>)
 8003b42:	f7fe fdea 	bl	800271a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <xTaskRemoveFromEventList+0xc0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d905      	bls.n	8003b60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <xTaskRemoveFromEventList+0xc4>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e001      	b.n	8003b64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b64:	697b      	ldr	r3, [r7, #20]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20001084 	.word	0x20001084
 8003b74:	20001064 	.word	0x20001064
 8003b78:	20000b8c 	.word	0x20000b8c
 8003b7c:	2000101c 	.word	0x2000101c
 8003b80:	20000b88 	.word	0x20000b88
 8003b84:	20001070 	.word	0x20001070

08003b88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <vTaskInternalSetTimeOutState+0x24>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <vTaskInternalSetTimeOutState+0x28>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	605a      	str	r2, [r3, #4]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	20001074 	.word	0x20001074
 8003bb0:	20001060 	.word	0x20001060

08003bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	613b      	str	r3, [r7, #16]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	60fb      	str	r3, [r7, #12]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bf6:	f000 fe7d 	bl	80048f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <xTaskCheckForTimeOut+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d102      	bne.n	8003c1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e023      	b.n	8003c62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <xTaskCheckForTimeOut+0xc0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d007      	beq.n	8003c36 <xTaskCheckForTimeOut+0x82>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e015      	b.n	8003c62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d20b      	bcs.n	8003c58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff9b 	bl	8003b88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e004      	b.n	8003c62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c62:	f000 fe77 	bl	8004954 <vPortExitCritical>

	return xReturn;
 8003c66:	69fb      	ldr	r3, [r7, #28]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20001060 	.word	0x20001060
 8003c74:	20001074 	.word	0x20001074

08003c78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <vTaskMissedYield+0x14>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20001070 	.word	0x20001070

08003c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c98:	f000 f852 	bl	8003d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <prvIdleTask+0x28>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d9f9      	bls.n	8003c98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <prvIdleTask+0x2c>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cb4:	e7f0      	b.n	8003c98 <prvIdleTask+0x8>
 8003cb6:	bf00      	nop
 8003cb8:	20000b8c 	.word	0x20000b8c
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	e00c      	b.n	8003ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <prvInitialiseTaskLists+0x60>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fcf0 	bl	80026c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b37      	cmp	r3, #55	; 0x37
 8003cea:	d9ef      	bls.n	8003ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003cee:	f7fe fce7 	bl	80026c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cf2:	480d      	ldr	r0, [pc, #52]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003cf4:	f7fe fce4 	bl	80026c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <prvInitialiseTaskLists+0x6c>)
 8003cfa:	f7fe fce1 	bl	80026c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <prvInitialiseTaskLists+0x70>)
 8003d00:	f7fe fcde 	bl	80026c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d04:	480b      	ldr	r0, [pc, #44]	; (8003d34 <prvInitialiseTaskLists+0x74>)
 8003d06:	f7fe fcdb 	bl	80026c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <prvInitialiseTaskLists+0x78>)
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <prvInitialiseTaskLists+0x7c>)
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000b8c 	.word	0x20000b8c
 8003d24:	20000fec 	.word	0x20000fec
 8003d28:	20001000 	.word	0x20001000
 8003d2c:	2000101c 	.word	0x2000101c
 8003d30:	20001030 	.word	0x20001030
 8003d34:	20001048 	.word	0x20001048
 8003d38:	20001014 	.word	0x20001014
 8003d3c:	20001018 	.word	0x20001018

08003d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d46:	e019      	b.n	8003d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d48:	f000 fdd4 	bl	80048f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <prvCheckTasksWaitingTermination+0x50>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fd3b 	bl	80027d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d72:	f000 fdef 	bl	8004954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f810 	bl	8003d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e1      	bne.n	8003d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20001030 	.word	0x20001030
 8003d94:	2000105c 	.word	0x2000105c
 8003d98:	20001044 	.word	0x20001044

08003d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 ff8c 	bl	8004cd0 <vPortFree>
				vPortFree( pxTCB );
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 ff89 	bl	8004cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dbe:	e018      	b.n	8003df2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d103      	bne.n	8003dd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 ff80 	bl	8004cd0 <vPortFree>
	}
 8003dd0:	e00f      	b.n	8003df2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d00a      	beq.n	8003df2 <prvDeleteTCB+0x56>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <prvDeleteTCB+0x54>
	}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <prvResetNextTaskUnblockTime+0x38>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <prvResetNextTaskUnblockTime+0x3c>)
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e14:	e008      	b.n	8003e28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <prvResetNextTaskUnblockTime+0x38>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <prvResetNextTaskUnblockTime+0x3c>)
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	20001014 	.word	0x20001014
 8003e38:	2000107c 	.word	0x2000107c

08003e3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <xTaskGetSchedulerState+0x34>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	e008      	b.n	8003e62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <xTaskGetSchedulerState+0x38>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	e001      	b.n	8003e62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e62:	687b      	ldr	r3, [r7, #4]
	}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	20001068 	.word	0x20001068
 8003e74:	20001084 	.word	0x20001084

08003e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d056      	beq.n	8003f3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <xTaskPriorityDisinherit+0xd0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d00a      	beq.n	8003eae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	60fb      	str	r3, [r7, #12]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60bb      	str	r3, [r7, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed0:	1e5a      	subs	r2, r3, #1
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d02c      	beq.n	8003f3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d128      	bne.n	8003f3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fc70 	bl	80027d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <xTaskPriorityDisinherit+0xd4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d903      	bls.n	8003f1c <xTaskPriorityDisinherit+0xa4>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <xTaskPriorityDisinherit+0xd4>)
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <xTaskPriorityDisinherit+0xd8>)
 8003f2a:	441a      	add	r2, r3
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7fe fbf1 	bl	800271a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f3c:	697b      	ldr	r3, [r7, #20]
	}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000b88 	.word	0x20000b88
 8003f4c:	20001064 	.word	0x20001064
 8003f50:	20000b8c 	.word	0x20000b8c

08003f54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f64:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fc32 	bl	80027d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d10a      	bne.n	8003f8e <prvAddCurrentTaskToDelayedList+0x3a>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4819      	ldr	r0, [pc, #100]	; (8003fec <prvAddCurrentTaskToDelayedList+0x98>)
 8003f88:	f7fe fbc7 	bl	800271a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f8c:	e026      	b.n	8003fdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f96:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d209      	bcs.n	8003fba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f7fe fbd5 	bl	8002762 <vListInsert>
}
 8003fb8:	e010      	b.n	8003fdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fe fbcb 	bl	8002762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d202      	bcs.n	8003fdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fd6:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20001060 	.word	0x20001060
 8003fe8:	20000b88 	.word	0x20000b88
 8003fec:	20001048 	.word	0x20001048
 8003ff0:	20001018 	.word	0x20001018
 8003ff4:	20001014 	.word	0x20001014
 8003ff8:	2000107c 	.word	0x2000107c

08003ffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004006:	f000 fb07 	bl	8004618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <xTimerCreateTimerTask+0x80>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d021      	beq.n	8004056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800401a:	1d3a      	adds	r2, r7, #4
 800401c:	f107 0108 	add.w	r1, r7, #8
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe fb31 	bl	800268c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	9202      	str	r2, [sp, #8]
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	2302      	movs	r3, #2
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2300      	movs	r3, #0
 800403a:	460a      	mov	r2, r1
 800403c:	4910      	ldr	r1, [pc, #64]	; (8004080 <xTimerCreateTimerTask+0x84>)
 800403e:	4811      	ldr	r0, [pc, #68]	; (8004084 <xTimerCreateTimerTask+0x88>)
 8004040:	f7ff f8de 	bl	8003200 <xTaskCreateStatic>
 8004044:	4603      	mov	r3, r0
 8004046:	4a10      	ldr	r2, [pc, #64]	; (8004088 <xTimerCreateTimerTask+0x8c>)
 8004048:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <xTimerCreateTimerTask+0x8c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	613b      	str	r3, [r7, #16]
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200010b8 	.word	0x200010b8
 8004080:	08004fac 	.word	0x08004fac
 8004084:	080041c1 	.word	0x080041c1
 8004088:	200010bc 	.word	0x200010bc

0800408c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800409a:	2300      	movs	r3, #0
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	623b      	str	r3, [r7, #32]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040ba:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <xTimerGenericCommand+0x98>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02a      	beq.n	8004118 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	dc18      	bgt.n	8004106 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040d4:	f7ff feb2 	bl	8003e3c <xTaskGetSchedulerState>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d109      	bne.n	80040f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <xTimerGenericCommand+0x98>)
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f107 0110 	add.w	r1, r7, #16
 80040e6:	2300      	movs	r3, #0
 80040e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ea:	f7fe fca1 	bl	8002a30 <xQueueGenericSend>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24
 80040f0:	e012      	b.n	8004118 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <xTimerGenericCommand+0x98>)
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	f107 0110 	add.w	r1, r7, #16
 80040fa:	2300      	movs	r3, #0
 80040fc:	2200      	movs	r2, #0
 80040fe:	f7fe fc97 	bl	8002a30 <xQueueGenericSend>
 8004102:	6278      	str	r0, [r7, #36]	; 0x24
 8004104:	e008      	b.n	8004118 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <xTimerGenericCommand+0x98>)
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	f107 0110 	add.w	r1, r7, #16
 800410e:	2300      	movs	r3, #0
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	f7fe fd8b 	bl	8002c2c <xQueueGenericSendFromISR>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800411a:	4618      	mov	r0, r3
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200010b8 	.word	0x200010b8

08004128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af02      	add	r7, sp, #8
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <prvProcessExpiredTimer+0x94>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fb47 	bl	80027d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d022      	beq.n	800419a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	18d1      	adds	r1, r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f000 f8d1 	bl	8004308 <prvInsertTimerInActiveList>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01f      	beq.n	80041ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800416c:	2300      	movs	r3, #0
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2300      	movs	r3, #0
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	2100      	movs	r1, #0
 8004176:	6978      	ldr	r0, [r7, #20]
 8004178:	f7ff ff88 	bl	800408c <xTimerGenericCommand>
 800417c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d113      	bne.n	80041ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	60fb      	str	r3, [r7, #12]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	6978      	ldr	r0, [r7, #20]
 80041b2:	4798      	blx	r3
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200010b0 	.word	0x200010b0

080041c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041c8:	f107 0308 	add.w	r3, r7, #8
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f857 	bl	8004280 <prvGetNextExpireTime>
 80041d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4619      	mov	r1, r3
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f803 	bl	80041e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041de:	f000 f8d5 	bl	800438c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041e2:	e7f1      	b.n	80041c8 <prvTimerTask+0x8>

080041e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041ee:	f7ff fa43 	bl	8003678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041f2:	f107 0308 	add.w	r3, r7, #8
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f866 	bl	80042c8 <prvSampleTimeNow>
 80041fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d130      	bne.n	8004266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <prvProcessTimerOrBlockTask+0x3c>
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	429a      	cmp	r2, r3
 8004210:	d806      	bhi.n	8004220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004212:	f7ff fa3f 	bl	8003694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ff85 	bl	8004128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800421e:	e024      	b.n	800426a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <prvProcessTimerOrBlockTask+0x90>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <prvProcessTimerOrBlockTask+0x50>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <prvProcessTimerOrBlockTask+0x52>
 8004234:	2300      	movs	r3, #0
 8004236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <prvProcessTimerOrBlockTask+0x94>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	f7fe ffa7 	bl	8003198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800424a:	f7ff fa23 	bl	8003694 <xTaskResumeAll>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <prvProcessTimerOrBlockTask+0x98>)
 8004256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	f3bf 8f6f 	isb	sy
}
 8004264:	e001      	b.n	800426a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004266:	f7ff fa15 	bl	8003694 <xTaskResumeAll>
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200010b4 	.word	0x200010b4
 8004278:	200010b8 	.word	0x200010b8
 800427c:	e000ed04 	.word	0xe000ed04

08004280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <prvGetNextExpireTime+0x44>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <prvGetNextExpireTime+0x16>
 8004292:	2201      	movs	r2, #1
 8004294:	e000      	b.n	8004298 <prvGetNextExpireTime+0x18>
 8004296:	2200      	movs	r2, #0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <prvGetNextExpireTime+0x44>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e001      	b.n	80042b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042b4:	68fb      	ldr	r3, [r7, #12]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	200010b0 	.word	0x200010b0

080042c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042d0:	f7ff fa7e 	bl	80037d0 <xTaskGetTickCount>
 80042d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <prvSampleTimeNow+0x3c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d205      	bcs.n	80042ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042e0:	f000 f936 	bl	8004550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e002      	b.n	80042f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042f2:	4a04      	ldr	r2, [pc, #16]	; (8004304 <prvSampleTimeNow+0x3c>)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042f8:	68fb      	ldr	r3, [r7, #12]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200010c0 	.word	0x200010c0

08004308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d812      	bhi.n	8004354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e01b      	b.n	800437a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <prvInsertTimerInActiveList+0x7c>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7fe fa08 	bl	8002762 <vListInsert>
 8004352:	e012      	b.n	800437a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d206      	bcs.n	800436a <prvInsertTimerInActiveList+0x62>
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e007      	b.n	800437a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <prvInsertTimerInActiveList+0x80>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7fe f9f4 	bl	8002762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800437a:	697b      	ldr	r3, [r7, #20]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	200010b4 	.word	0x200010b4
 8004388:	200010b0 	.word	0x200010b0

0800438c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004392:	e0ca      	b.n	800452a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	da18      	bge.n	80043cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	3304      	adds	r3, #4
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	61fb      	str	r3, [r7, #28]
}
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c2:	6850      	ldr	r0, [r2, #4]
 80043c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c6:	6892      	ldr	r2, [r2, #8]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f2c0 80aa 	blt.w	8004528 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	3304      	adds	r3, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe f9f5 	bl	80027d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ea:	463b      	mov	r3, r7
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff6b 	bl	80042c8 <prvSampleTimeNow>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	f200 8097 	bhi.w	800452a <prvProcessReceivedCommands+0x19e>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <prvProcessReceivedCommands+0x78>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	0800442d 	.word	0x0800442d
 8004408:	0800442d 	.word	0x0800442d
 800440c:	0800442d 	.word	0x0800442d
 8004410:	080044a1 	.word	0x080044a1
 8004414:	080044b5 	.word	0x080044b5
 8004418:	080044ff 	.word	0x080044ff
 800441c:	0800442d 	.word	0x0800442d
 8004420:	0800442d 	.word	0x0800442d
 8004424:	080044a1 	.word	0x080044a1
 8004428:	080044b5 	.word	0x080044b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	18d1      	adds	r1, r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444c:	f7ff ff5c 	bl	8004308 <prvInsertTimerInActiveList>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d069      	beq.n	800452a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800445c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05e      	beq.n	800452a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	441a      	add	r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2300      	movs	r3, #0
 800447a:	2100      	movs	r1, #0
 800447c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447e:	f7ff fe05 	bl	800408c <xTimerGenericCommand>
 8004482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d14f      	bne.n	800452a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	61bb      	str	r3, [r7, #24]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80044b2:	e03a      	b.n	800452a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	617b      	str	r3, [r7, #20]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	18d1      	adds	r1, r2, r3
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f8:	f7ff ff06 	bl	8004308 <prvInsertTimerInActiveList>
					break;
 80044fc:	e015      	b.n	800452a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800450c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450e:	f000 fbdf 	bl	8004cd0 <vPortFree>
 8004512:	e00a      	b.n	800452a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004526:	e000      	b.n	800452a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <prvProcessReceivedCommands+0x1c0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	1d39      	adds	r1, r7, #4
 8004530:	2200      	movs	r2, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fc16 	bl	8002d64 <xQueueReceive>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f47f af2a 	bne.w	8004394 <prvProcessReceivedCommands+0x8>
	}
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3730      	adds	r7, #48	; 0x30
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	200010b8 	.word	0x200010b8

08004550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004556:	e048      	b.n	80045ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <prvSwitchTimerLists+0xc0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <prvSwitchTimerLists+0xc0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3304      	adds	r3, #4
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe f92f 	bl	80027d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02e      	beq.n	80045ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d90e      	bls.n	80045bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045aa:	4b19      	ldr	r3, [pc, #100]	; (8004610 <prvSwitchTimerLists+0xc0>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7fe f8d4 	bl	8002762 <vListInsert>
 80045ba:	e016      	b.n	80045ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045bc:	2300      	movs	r3, #0
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	2100      	movs	r1, #0
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff fd60 	bl	800408c <xTimerGenericCommand>
 80045cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	603b      	str	r3, [r7, #0]
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <prvSwitchTimerLists+0xc0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1b1      	bne.n	8004558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <prvSwitchTimerLists+0xc0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <prvSwitchTimerLists+0xc4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a04      	ldr	r2, [pc, #16]	; (8004610 <prvSwitchTimerLists+0xc0>)
 8004600:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004602:	4a04      	ldr	r2, [pc, #16]	; (8004614 <prvSwitchTimerLists+0xc4>)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	6013      	str	r3, [r2, #0]
}
 8004608:	bf00      	nop
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200010b0 	.word	0x200010b0
 8004614:	200010b4 	.word	0x200010b4

08004618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800461e:	f000 f969 	bl	80048f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <prvCheckForValidListAndQueue+0x60>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d120      	bne.n	800466c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800462a:	4814      	ldr	r0, [pc, #80]	; (800467c <prvCheckForValidListAndQueue+0x64>)
 800462c:	f7fe f848 	bl	80026c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004630:	4813      	ldr	r0, [pc, #76]	; (8004680 <prvCheckForValidListAndQueue+0x68>)
 8004632:	f7fe f845 	bl	80026c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <prvCheckForValidListAndQueue+0x6c>)
 8004638:	4a10      	ldr	r2, [pc, #64]	; (800467c <prvCheckForValidListAndQueue+0x64>)
 800463a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800463c:	4b12      	ldr	r3, [pc, #72]	; (8004688 <prvCheckForValidListAndQueue+0x70>)
 800463e:	4a10      	ldr	r2, [pc, #64]	; (8004680 <prvCheckForValidListAndQueue+0x68>)
 8004640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004642:	2300      	movs	r3, #0
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <prvCheckForValidListAndQueue+0x74>)
 8004648:	4a11      	ldr	r2, [pc, #68]	; (8004690 <prvCheckForValidListAndQueue+0x78>)
 800464a:	2110      	movs	r1, #16
 800464c:	200a      	movs	r0, #10
 800464e:	f7fe f953 	bl	80028f8 <xQueueGenericCreateStatic>
 8004652:	4603      	mov	r3, r0
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <prvCheckForValidListAndQueue+0x60>)
 8004656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <prvCheckForValidListAndQueue+0x60>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <prvCheckForValidListAndQueue+0x60>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	490b      	ldr	r1, [pc, #44]	; (8004694 <prvCheckForValidListAndQueue+0x7c>)
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fd6c 	bl	8003144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800466c:	f000 f972 	bl	8004954 <vPortExitCritical>
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200010b8 	.word	0x200010b8
 800467c:	20001088 	.word	0x20001088
 8004680:	2000109c 	.word	0x2000109c
 8004684:	200010b0 	.word	0x200010b0
 8004688:	200010b4 	.word	0x200010b4
 800468c:	20001164 	.word	0x20001164
 8004690:	200010c4 	.word	0x200010c4
 8004694:	08004fb4 	.word	0x08004fb4

08004698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b04      	subs	r3, #4
 80046a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b04      	subs	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f023 0201 	bic.w	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b04      	subs	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046c8:	4a0c      	ldr	r2, [pc, #48]	; (80046fc <pxPortInitialiseStack+0x64>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3b14      	subs	r3, #20
 80046d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b04      	subs	r3, #4
 80046de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f06f 0202 	mvn.w	r2, #2
 80046e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b20      	subs	r3, #32
 80046ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046ee:	68fb      	ldr	r3, [r7, #12]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	08004701 	.word	0x08004701

08004700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <prvTaskExitError+0x54>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d00a      	beq.n	800472a <prvTaskExitError+0x2a>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	60fb      	str	r3, [r7, #12]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <prvTaskExitError+0x28>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60bb      	str	r3, [r7, #8]
}
 800473c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800473e:	bf00      	nop
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0fc      	beq.n	8004740 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	2000040c 	.word	0x2000040c
	...

08004760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <pxCurrentTCBConst2>)
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	6808      	ldr	r0, [r1, #0]
 8004766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	f380 8809 	msr	PSP, r0
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8811 	msr	BASEPRI, r0
 800477a:	4770      	bx	lr
 800477c:	f3af 8000 	nop.w

08004780 <pxCurrentTCBConst2>:
 8004780:	20000b88 	.word	0x20000b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004788:	4808      	ldr	r0, [pc, #32]	; (80047ac <prvPortStartFirstTask+0x24>)
 800478a:	6800      	ldr	r0, [r0, #0]
 800478c:	6800      	ldr	r0, [r0, #0]
 800478e:	f380 8808 	msr	MSP, r0
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	f380 8814 	msr	CONTROL, r0
 800479a:	b662      	cpsie	i
 800479c:	b661      	cpsie	f
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	df00      	svc	0
 80047a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047aa:	bf00      	nop
 80047ac:	e000ed08 	.word	0xe000ed08

080047b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047b6:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <xPortStartScheduler+0x120>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a46      	ldr	r2, [pc, #280]	; (80048d4 <xPortStartScheduler+0x124>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10a      	bne.n	80047d6 <xPortStartScheduler+0x26>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	613b      	str	r3, [r7, #16]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047d6:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <xPortStartScheduler+0x120>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3f      	ldr	r2, [pc, #252]	; (80048d8 <xPortStartScheduler+0x128>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10a      	bne.n	80047f6 <xPortStartScheduler+0x46>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60fb      	str	r3, [r7, #12]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047f6:	4b39      	ldr	r3, [pc, #228]	; (80048dc <xPortStartScheduler+0x12c>)
 80047f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <xPortStartScheduler+0x130>)
 800481c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <xPortStartScheduler+0x134>)
 8004820:	2207      	movs	r2, #7
 8004822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004824:	e009      	b.n	800483a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004826:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <xPortStartScheduler+0x134>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	4a2d      	ldr	r2, [pc, #180]	; (80048e4 <xPortStartScheduler+0x134>)
 800482e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d0ef      	beq.n	8004826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004846:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <xPortStartScheduler+0x134>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1c3 0307 	rsb	r3, r3, #7
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00a      	beq.n	8004868 <xPortStartScheduler+0xb8>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60bb      	str	r3, [r7, #8]
}
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <xPortStartScheduler+0x134>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <xPortStartScheduler+0x134>)
 8004870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <xPortStartScheduler+0x134>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800487a:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <xPortStartScheduler+0x134>)
 800487c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004886:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <xPortStartScheduler+0x138>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <xPortStartScheduler+0x138>)
 800488c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <xPortStartScheduler+0x138>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <xPortStartScheduler+0x138>)
 8004898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800489c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800489e:	f000 f8dd 	bl	8004a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <xPortStartScheduler+0x13c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048a8:	f000 f8fc 	bl	8004aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048ac:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <xPortStartScheduler+0x140>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a0f      	ldr	r2, [pc, #60]	; (80048f0 <xPortStartScheduler+0x140>)
 80048b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048b8:	f7ff ff66 	bl	8004788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048bc:	f7ff f852 	bl	8003964 <vTaskSwitchContext>
	prvTaskExitError();
 80048c0:	f7ff ff1e 	bl	8004700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000ed00 	.word	0xe000ed00
 80048d4:	410fc271 	.word	0x410fc271
 80048d8:	410fc270 	.word	0x410fc270
 80048dc:	e000e400 	.word	0xe000e400
 80048e0:	200011b4 	.word	0x200011b4
 80048e4:	200011b8 	.word	0x200011b8
 80048e8:	e000ed20 	.word	0xe000ed20
 80048ec:	2000040c 	.word	0x2000040c
 80048f0:	e000ef34 	.word	0xe000ef34

080048f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	607b      	str	r3, [r7, #4]
}
 800490c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <vPortEnterCritical+0x58>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	4a0d      	ldr	r2, [pc, #52]	; (800494c <vPortEnterCritical+0x58>)
 8004916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <vPortEnterCritical+0x58>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10f      	bne.n	8004940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <vPortEnterCritical+0x5c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <vPortEnterCritical+0x4c>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	603b      	str	r3, [r7, #0]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <vPortEnterCritical+0x4a>
	}
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	2000040c 	.word	0x2000040c
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <vPortExitCritical+0x50>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <vPortExitCritical+0x24>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	607b      	str	r3, [r7, #4]
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <vPortExitCritical+0x50>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3b01      	subs	r3, #1
 800497e:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <vPortExitCritical+0x50>)
 8004980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <vPortExitCritical+0x50>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <vPortExitCritical+0x42>
 800498a:	2300      	movs	r3, #0
 800498c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f383 8811 	msr	BASEPRI, r3
}
 8004994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	2000040c 	.word	0x2000040c
	...

080049b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049b0:	f3ef 8009 	mrs	r0, PSP
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <pxCurrentTCBConst>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	f01e 0f10 	tst.w	lr, #16
 80049c0:	bf08      	it	eq
 80049c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049d4:	f380 8811 	msr	BASEPRI, r0
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f7fe ffc0 	bl	8003964 <vTaskSwitchContext>
 80049e4:	f04f 0000 	mov.w	r0, #0
 80049e8:	f380 8811 	msr	BASEPRI, r0
 80049ec:	bc09      	pop	{r0, r3}
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	6808      	ldr	r0, [r1, #0]
 80049f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f6:	f01e 0f10 	tst.w	lr, #16
 80049fa:	bf08      	it	eq
 80049fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a00:	f380 8809 	msr	PSP, r0
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst>:
 8004a10:	20000b88 	.word	0x20000b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
}
 8004a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a32:	f7fe fedd 	bl	80037f0 <xTaskIncrementTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <xPortSysTickHandler+0x40>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	2300      	movs	r3, #0
 8004a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f383 8811 	msr	BASEPRI, r3
}
 8004a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <vPortSetupTimerInterrupt+0x34>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <vPortSetupTimerInterrupt+0x38>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <vPortSetupTimerInterrupt+0x3c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <vPortSetupTimerInterrupt+0x40>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <vPortSetupTimerInterrupt+0x44>)
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <vPortSetupTimerInterrupt+0x34>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e010 	.word	0xe000e010
 8004a94:	e000e018 	.word	0xe000e018
 8004a98:	20000400 	.word	0x20000400
 8004a9c:	10624dd3 	.word	0x10624dd3
 8004aa0:	e000e014 	.word	0xe000e014

08004aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ab4 <vPortEnableVFP+0x10>
 8004aa8:	6801      	ldr	r1, [r0, #0]
 8004aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004aae:	6001      	str	r1, [r0, #0]
 8004ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ab2:	bf00      	nop
 8004ab4:	e000ed88 	.word	0xe000ed88

08004ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004abe:	f3ef 8305 	mrs	r3, IPSR
 8004ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	d914      	bls.n	8004af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aca:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <vPortValidateInterruptPriority+0x70>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ad4:	4b15      	ldr	r3, [pc, #84]	; (8004b2c <vPortValidateInterruptPriority+0x74>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	7afa      	ldrb	r2, [r7, #11]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d20a      	bcs.n	8004af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <vPortValidateInterruptPriority+0x78>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <vPortValidateInterruptPriority+0x7c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d90a      	bls.n	8004b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	603b      	str	r3, [r7, #0]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <vPortValidateInterruptPriority+0x60>
	}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	e000e3f0 	.word	0xe000e3f0
 8004b2c:	200011b4 	.word	0x200011b4
 8004b30:	e000ed0c 	.word	0xe000ed0c
 8004b34:	200011b8 	.word	0x200011b8

08004b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b44:	f7fe fd98 	bl	8003678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b48:	4b5b      	ldr	r3, [pc, #364]	; (8004cb8 <pvPortMalloc+0x180>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b50:	f000 f920 	bl	8004d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b54:	4b59      	ldr	r3, [pc, #356]	; (8004cbc <pvPortMalloc+0x184>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 8093 	bne.w	8004c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01d      	beq.n	8004ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b68:	2208      	movs	r2, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d014      	beq.n	8004ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f023 0307 	bic.w	r3, r3, #7
 8004b80:	3308      	adds	r3, #8
 8004b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	617b      	str	r3, [r7, #20]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d06e      	beq.n	8004c88 <pvPortMalloc+0x150>
 8004baa:	4b45      	ldr	r3, [pc, #276]	; (8004cc0 <pvPortMalloc+0x188>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d869      	bhi.n	8004c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bb4:	4b43      	ldr	r3, [pc, #268]	; (8004cc4 <pvPortMalloc+0x18c>)
 8004bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bb8:	4b42      	ldr	r3, [pc, #264]	; (8004cc4 <pvPortMalloc+0x18c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bbe:	e004      	b.n	8004bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d903      	bls.n	8004bdc <pvPortMalloc+0xa4>
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f1      	bne.n	8004bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bdc:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <pvPortMalloc+0x180>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d050      	beq.n	8004c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2208      	movs	r2, #8
 8004bec:	4413      	add	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1ad2      	subs	r2, r2, r3
 8004c00:	2308      	movs	r3, #8
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d91f      	bls.n	8004c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <pvPortMalloc+0xf8>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	613b      	str	r3, [r7, #16]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	1ad2      	subs	r2, r2, r3
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c42:	69b8      	ldr	r0, [r7, #24]
 8004c44:	f000 f908 	bl	8004e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c48:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <pvPortMalloc+0x188>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <pvPortMalloc+0x188>)
 8004c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <pvPortMalloc+0x188>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <pvPortMalloc+0x190>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d203      	bcs.n	8004c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c62:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <pvPortMalloc+0x188>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <pvPortMalloc+0x190>)
 8004c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <pvPortMalloc+0x184>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c7e:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <pvPortMalloc+0x194>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3301      	adds	r3, #1
 8004c84:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <pvPortMalloc+0x194>)
 8004c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c88:	f7fe fd04 	bl	8003694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <pvPortMalloc+0x174>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	60fb      	str	r3, [r7, #12]
}
 8004ca8:	bf00      	nop
 8004caa:	e7fe      	b.n	8004caa <pvPortMalloc+0x172>
	return pvReturn;
 8004cac:	69fb      	ldr	r3, [r7, #28]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20004dc4 	.word	0x20004dc4
 8004cbc:	20004dd8 	.word	0x20004dd8
 8004cc0:	20004dc8 	.word	0x20004dc8
 8004cc4:	20004dbc 	.word	0x20004dbc
 8004cc8:	20004dcc 	.word	0x20004dcc
 8004ccc:	20004dd0 	.word	0x20004dd0

08004cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d04d      	beq.n	8004d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	425b      	negs	r3, r3
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <vPortFree+0xb8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <vPortFree+0x44>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	60fb      	str	r3, [r7, #12]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <vPortFree+0x62>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60bb      	str	r3, [r7, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <vPortFree+0xb8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01e      	beq.n	8004d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d11a      	bne.n	8004d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <vPortFree+0xb8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	401a      	ands	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d58:	f7fe fc8e 	bl	8003678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <vPortFree+0xbc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4413      	add	r3, r2
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <vPortFree+0xbc>)
 8004d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d6a:	6938      	ldr	r0, [r7, #16]
 8004d6c:	f000 f874 	bl	8004e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <vPortFree+0xc0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	4a06      	ldr	r2, [pc, #24]	; (8004d90 <vPortFree+0xc0>)
 8004d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d7a:	f7fe fc8b 	bl	8003694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20004dd8 	.word	0x20004dd8
 8004d8c:	20004dc8 	.word	0x20004dc8
 8004d90:	20004dd4 	.word	0x20004dd4

08004d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004da0:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <prvHeapInit+0xac>)
 8004da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3307      	adds	r3, #7
 8004db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <prvHeapInit+0xac>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <prvHeapInit+0xb0>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <prvHeapInit+0xb0>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4413      	add	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004de0:	2208      	movs	r2, #8
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <prvHeapInit+0xb4>)
 8004df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <prvHeapInit+0xb4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <prvHeapInit+0xb4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvHeapInit+0xb4>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <prvHeapInit+0xb8>)
 8004e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <prvHeapInit+0xbc>)
 8004e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <prvHeapInit+0xc0>)
 8004e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e32:	601a      	str	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	200011bc 	.word	0x200011bc
 8004e44:	20004dbc 	.word	0x20004dbc
 8004e48:	20004dc4 	.word	0x20004dc4
 8004e4c:	20004dcc 	.word	0x20004dcc
 8004e50:	20004dc8 	.word	0x20004dc8
 8004e54:	20004dd8 	.word	0x20004dd8

08004e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e60:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <prvInsertBlockIntoFreeList+0xac>)
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e002      	b.n	8004e6c <prvInsertBlockIntoFreeList+0x14>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d8f7      	bhi.n	8004e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4413      	add	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d108      	bne.n	8004e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	441a      	add	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d118      	bne.n	8004ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <prvInsertBlockIntoFreeList+0xb0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d00d      	beq.n	8004ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	441a      	add	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e008      	b.n	8004ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <prvInsertBlockIntoFreeList+0xb0>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e003      	b.n	8004ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d002      	beq.n	8004ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20004dbc 	.word	0x20004dbc
 8004f08:	20004dc4 	.word	0x20004dc4

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4d0d      	ldr	r5, [pc, #52]	; (8004f44 <__libc_init_array+0x38>)
 8004f10:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f12:	1b64      	subs	r4, r4, r5
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	2600      	movs	r6, #0
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	4d0b      	ldr	r5, [pc, #44]	; (8004f4c <__libc_init_array+0x40>)
 8004f1e:	4c0c      	ldr	r4, [pc, #48]	; (8004f50 <__libc_init_array+0x44>)
 8004f20:	f000 f82e 	bl	8004f80 <_init>
 8004f24:	1b64      	subs	r4, r4, r5
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	2600      	movs	r6, #0
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08005000 	.word	0x08005000
 8004f48:	08005000 	.word	0x08005000
 8004f4c:	08005000 	.word	0x08005000
 8004f50:	08005004 	.word	0x08005004

08004f54 <memcpy>:
 8004f54:	440a      	add	r2, r1
 8004f56:	4291      	cmp	r1, r2
 8004f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f5c:	d100      	bne.n	8004f60 <memcpy+0xc>
 8004f5e:	4770      	bx	lr
 8004f60:	b510      	push	{r4, lr}
 8004f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f6a:	4291      	cmp	r1, r2
 8004f6c:	d1f9      	bne.n	8004f62 <memcpy+0xe>
 8004f6e:	bd10      	pop	{r4, pc}

08004f70 <memset>:
 8004f70:	4402      	add	r2, r0
 8004f72:	4603      	mov	r3, r0
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d100      	bne.n	8004f7a <memset+0xa>
 8004f78:	4770      	bx	lr
 8004f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7e:	e7f9      	b.n	8004f74 <memset+0x4>

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
